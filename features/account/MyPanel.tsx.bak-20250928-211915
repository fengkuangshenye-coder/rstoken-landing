"use client";
import React from "react";
import { useAccount, useBalance, useReadContract } from "wagmi";
import { formatUnits } from "viem";
import { TOKENS, isNative, tokenIconSrc } from "@/lib/tokens";

const ERC20 = [
  { type:"function", name:"decimals", stateMutability:"view", inputs:[], outputs:[{ type:"uint8" }] },
  { type:"function", name:"balanceOf", stateMutability:"view", inputs:[{ name:"owner", type:"address" }], outputs:[{ type:"uint256" }] },
] as const;

function Row({ icon, symbol, value }:{ icon:string; symbol:string; value:string }){
  return (
    <div className="flex items-center justify-between rounded-xl border me-row px-3 py-2 gap-3"
         style={{borderColor:"var(--rs-border)",background:"rgba(255,255,255,.03)"}}>
      <div className="flex items-center gap-2  pt-[64px] pb-[72px]">
        <img src={icon} alt={symbol} className=" w-5 rounded-full"/>
        <span>{symbol}</span>
      </div>
      <div className="text-right text-sm">{value}</div>
    </div>
  );
}

export default function MyPanel(){
  const { address } = useAccount();

  return (
    <div className="space-y-3">
      <div className="rounded-xl border me-row p-3 gap-3" style={{borderColor:"var(--rs-border)",background:"rgba(255,255,255,.03)"}}>
        <div className="text-xs text-white/60 mb-1">地址</div>
        <div className="text-sm break-all">{address ?? "未连接"}</div>
      </div>

      {TOKENS.map(t=>{
        if (isNative(t)) {
          const { data } = useBalance({ address, query: { enabled: !!address } });
          const v = data ? data.formatted : "0";
          return <Row key={t.symbol} icon={tokenIconSrc(t.symbol)} symbol={t.symbol} value={v} />;
        } else {
          const { data: bal } = useReadContract({
            address: t.address as `0x${string}`,
            abi: ERC20,
            functionName: "balanceOf",
            args: address ? [address as `0x${string}`] : undefined,
            query: { enabled: !!address }
          });
          const { data: dec } = useReadContract({
            address: t.address as `0x${string}`,
            abi: ERC20,
            functionName: "decimals",
            args: [],
            query: { enabled: true }
          });
          const v = (bal && dec!=null) ? formatUnits(bal as bigint, Number(dec)) : "0";
          return <Row key={t.symbol} icon={tokenIconSrc(t.symbol)} symbol={t.symbol} value={v} />;
        }
      })}
    </div>
  );
}
